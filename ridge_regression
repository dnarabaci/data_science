{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Duygu Nur Arabaci Data Science Homework 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def problem1():\n",
    "    \"\"\"\n",
    "    The features are : relative compactness, surface area, wall area, roof area, overall height,\n",
    "    orientation, glazing area, glazing area distribution. The two output variables are heating load (HL) and\n",
    "    cooling load (CL), of residential buildings.\n",
    "    \"\"\"\n",
    "    \n",
    "    import pandas as pd\n",
    "    from sklearn.linear_model import RidgeCV\n",
    "    from sklearn.model_selection import KFold\n",
    "    from sklearn.linear_model import Ridge\n",
    "    import numpy as np \n",
    "    from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "    \n",
    "\n",
    "    #get file\n",
    "    path = \"data_files/ENB2012_data.xlsx\"\n",
    "    data = pd.read_excel(path, dtype=int)\n",
    "\n",
    "    #ridge regression specification\n",
    "    regr_cv = RidgeCV(alphas=(0.001, 0.01, 0.1, 1.0, 10.0), normalize = True)\n",
    "    #features=[\"relative compactness\", \"surface area\", \"wall area\", \"roof area\", \"overall height\",\n",
    "    #\"orientation\", \"glazing area\", \"glazing area distribution\"]\n",
    "    \n",
    "    \n",
    "    #assign variables\n",
    "    features = [\"X2\", \"X3\", \"X4\", \"X5\", \"X6\", \"X7\", \"X8\"]\n",
    "    X=data[features]\n",
    "    y=data.Y1\n",
    "    y2=data.Y2\n",
    "    #put into model\n",
    "    model_cv = regr_cv.fit(X, y)\n",
    "    model_cv2 = regr_cv.fit(X, y2)\n",
    "\n",
    "    #get optimal alpha\n",
    "    the_alpha = model_cv.alpha_\n",
    "    the_alpha2 = model_cv2.alpha_\n",
    "    #define splits\n",
    "    kf = KFold(n_splits=10, shuffle=True)\n",
    "    #optimal model fit\n",
    "    regr_cv_optimal = Ridge(alpha=the_alpha)\n",
    "    regr_cv_optimal2 = Ridge(alpha=the_alpha2)\n",
    "    \n",
    "    model_cv_optimal = regr_cv_optimal.fit(X, y)\n",
    "    model_cv_optimal2 = regr_cv_optimal2.fit(X, y2)\n",
    "    #10 times split into train and test data and fit according to train, then calculate the mse and mae\n",
    "    scores_mae=[]\n",
    "    scores_mse=[]\n",
    "    for train, test in kf.split(X,y):\n",
    "        model = regr_cv_optimal.fit(X.values[train], y.values[train])\n",
    "        y_pred = model.predict(X.values[test])\n",
    "        mae = mean_absolute_error(y.values[test], y_pred)\n",
    "        mse = mean_squared_error(y.values[test], y_pred)\n",
    "        scores_mae.append(mae)\n",
    "        scores_mse.append(mse)\n",
    "    #repeat for y2\n",
    "    scores_mae2=[]\n",
    "    scores_mse2=[]\n",
    "    for train, test in kf.split(X,y2):\n",
    "        model = regr_cv_optimal2.fit(X.values[train], y2.values[train])\n",
    "        y_pred = model.predict(X.values[test])\n",
    "        mae2 = mean_absolute_error(y2.values[test], y_pred)\n",
    "        mse2 = mean_squared_error(y2.values[test], y_pred)\n",
    "        scores_mae2.append(mae2)\n",
    "        scores_mse2.append(mse2)\n",
    "        \n",
    "    print(np.mean(scores_mae),np.mean(scores_mse))\n",
    "    print(np.std(scores_mae), np.std(scores_mse))\n",
    "    \n",
    "    print(np.mean(scores_mae2),np.mean(scores_mse2))\n",
    "    print(np.std(scores_mae2), np.std(scores_mse2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.022774062812867 15.76421696359636\n",
      "0.22116774092513594 2.9580751576481497\n",
      "2.8503913883501246 14.355517090970434\n",
      "0.2570566142846691 2.4590175367674325\n"
     ]
    }
   ],
   "source": [
    "problem1()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
